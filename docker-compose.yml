version: '3.8'

services:
  # Aplicación principal
  task-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Firebase configuration (uncomment and configure as needed)
      # - FIREBASE_PROJECT_ID=your-project-id
      # - FIREBASE_PRIVATE_KEY_ID=your-private-key-id
      # - FIREBASE_PRIVATE_KEY=your-private-key
      # - FIREBASE_CLIENT_EMAIL=your-client-email
      # - FIREBASE_CLIENT_ID=your-client-id
    volumes:
      # Mount Firebase service account if using file-based auth
      # - ./firebase-service-account.json:/app/firebase-service-account.json:ro
      # Mount environment file
      - ./.env:/app/.env:ro
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000/api/health'
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - task-network

  # Nginx como proxy reverso (opcional, para producción)
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./ssl:/etc/nginx/ssl:ro  # Para certificados SSL
    depends_on:
      - task-api
    restart: unless-stopped
    networks:
      - task-network
    profiles:
      - production

  # Redis para cache (opcional, para futuras mejoras)
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - task-network
    profiles:
      - cache

networks:
  task-network:
    driver: bridge
    name: task-management-network

volumes:
  redis-data:
    driver: local

# Configuración para desarrollo local
# Para usar: docker-compose --profile development up
---
version: '3.8'

services:
  # Desarrollo con hot reload
  task-api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    ports:
      - '3000:3000'
      - '9229:9229' # Puerto para debugging
    environment:
      - NODE_ENV=development
      - PORT=3000
    volumes:
      - .:/app
      - /app/node_modules
      - ./.env:/app/.env:ro
    command: npm run dev
    restart: unless-stopped
    networks:
      - task-network-dev
    profiles:
      - development

networks:
  task-network-dev:
    driver: bridge
    name: task-management-dev-network
