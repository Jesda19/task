/**
 * Script para configurar Firebase Firestore con datos iniciales
 * Ejecutar: node scripts/setup-firebase.js
 */

const admin = require('firebase-admin');
const path = require('path');

// Configurar Firebase Admin SDK
const serviceAccount = require('../firebase-service-account.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  projectId: serviceAccount.project_id
});

const db = admin.firestore();

// Datos de ejemplo para la colecci√≥n tasks
const sampleTasks = [
  {
    title: "Configurar Firebase",
    description: "Establecer la base de datos y autenticaci√≥n",
    completed: true,
    userId: "1",
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  },
  {
    title: "Implementar API REST",
    description: "Crear endpoints para operaciones CRUD",
    completed: true,
    userId: "1",
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  },
  {
    title: "Integrar servicios externos",
    description: "Conectar con JSONPlaceholder API",
    completed: false,
    userId: "2",
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  },
  {
    title: "Documentar API con Swagger",
    description: "Crear documentaci√≥n completa de la API",
    completed: false,
    userId: "1",
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  },
  {
    title: "Dockerizar aplicaci√≥n",
    description: "Crear Dockerfile y configurar contenedores",
    completed: false,
    userId: "3",
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  }
];

// Funci√≥n para configurar la colecci√≥n tasks
async function setupTasksCollection() {
  try {
    console.log('üî• Configurando colecci√≥n "tasks" en Firebase...');
    
    // Verificar si la colecci√≥n ya tiene datos
    const existingTasks = await db.collection('tasks').get();
    
    if (!existingTasks.empty) {
      console.log(`‚ö†Ô∏è  La colecci√≥n ya tiene ${existingTasks.size} documentos.`);
      const answer = await askQuestion('¬øDeseas eliminar los datos existentes y crear nuevos? (y/N): ');
      
      if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
        console.log('‚ùå Operaci√≥n cancelada.');
        return;
      }
      
      // Eliminar documentos existentes
      const batch = db.batch();
      existingTasks.docs.forEach(doc => {
        batch.delete(doc.ref);
      });
      await batch.commit();
      console.log('üóëÔ∏è  Datos existentes eliminados.');
    }
    
    // Agregar tareas de ejemplo
    const batch = db.batch();
    
    sampleTasks.forEach(task => {
      const docRef = db.collection('tasks').doc();
      batch.set(docRef, task);
    });
    
    await batch.commit();
    
    console.log('‚úÖ Colecci√≥n "tasks" configurada exitosamente!');
    console.log(`üìù Se agregaron ${sampleTasks.length} tareas de ejemplo.`);
    
    // Mostrar algunas tareas creadas
    const createdTasks = await db.collection('tasks').limit(3).get();
    console.log('\nüìã Tareas de ejemplo creadas:');
    createdTasks.docs.forEach(doc => {
      const data = doc.data();
      console.log(`   ‚Ä¢ ${data.title} (${data.completed ? '‚úÖ' : '‚è≥'})`);
    });
    
  } catch (error) {
    console.error('‚ùå Error configurando Firebase:', error);
    process.exit(1);
  }
}

// Funci√≥n para configurar √≠ndices
async function setupIndexes() {
  console.log('\nüîç Configurando √≠ndices...');
  
  // Los √≠ndices se crean autom√°ticamente cuando se realizan queries
  // Pero podemos crear algunos consultas para generar los √≠ndices necesarios
  try {
    // Query por userId
    await db.collection('tasks').where('userId', '==', '1').limit(1).get();
    
    // Query por completed
    await db.collection('tasks').where('completed', '==', false).limit(1).get();
    
    // Query ordenado por createdAt
    await db.collection('tasks').orderBy('createdAt', 'desc').limit(1).get();
    
    console.log('‚úÖ √çndices b√°sicos inicializados.');
    console.log('üí° Los √≠ndices compuestos se crear√°n autom√°ticamente seg√∫n las consultas.');
    
  } catch (error) {
    console.log('‚ö†Ô∏è  Algunos √≠ndices requieren configuraci√≥n manual en Firebase Console.');
  }
}

// Funci√≥n para verificar configuraci√≥n
async function verifySetup() {
  console.log('\nüîç Verificando configuraci√≥n...');
  
  try {
    // Verificar conexi√≥n
    const testDoc = await db.collection('tasks').limit(1).get();
    console.log('‚úÖ Conexi√≥n a Firestore exitosa.');
    
    // Verificar operaciones CRUD
    const testTaskRef = db.collection('tasks').doc();
    await testTaskRef.set({
      title: 'TEST_TASK_DELETE_ME',
      completed: false,
      userId: 'test',
      createdAt: admin.firestore.Timestamp.now(),
      updatedAt: admin.firestore.Timestamp.now()
    });
    
    const createdDoc = await testTaskRef.get();
    if (createdDoc.exists) {
      console.log('‚úÖ Operaci√≥n CREATE verificada.');
    }
    
    await testTaskRef.update({
      completed: true,
      updatedAt: admin.firestore.Timestamp.now()
    });
    console.log('‚úÖ Operaci√≥n UPDATE verificada.');
    
    await testTaskRef.delete();
    console.log('‚úÖ Operaci√≥n DELETE verificada.');
    
    // Verificar query
    const queryResult = await db.collection('tasks')
      .where('completed', '==', false)
      .limit(1)
      .get();
    console.log('‚úÖ Operaci√≥n QUERY verificada.');
    
    console.log('\nüéâ ¬°Firebase est√° completamente configurado y funcionando!');
    
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error);
  }
}

// Funci√≥n para mostrar informaci√≥n de configuraci√≥n
function showConfiguration() {
  console.log('\nüìã Informaci√≥n de configuraci√≥n:');
  console.log('='.repeat(50));
  console.log(`üè∑Ô∏è  Proyecto ID: ${serviceAccount.project_id}`);
  console.log(`üìß Client Email: ${serviceAccount.client_email}`);
  console.log(`üîë Private Key ID: ${serviceAccount.private_key_id}`);
  console.log('\nüåç Variables de entorno necesarias:');
  console.log(`FIREBASE_PROJECT_ID=${serviceAccount.project_id}`);
  console.log(`FIREBASE_CLIENT_EMAIL=${serviceAccount.client_email}`);
  console.log(`FIREBASE_PRIVATE_KEY_ID=${serviceAccount.private_key_id}`);
  console.log('FIREBASE_PRIVATE_KEY="[la clave privada completa]"');
  console.log('\nüí° O simplemente usa:');
  console.log('GOOGLE_APPLICATION_CREDENTIALS=./firebase-service-account.json');
}

// Funci√≥n helper para input de usuario
function askQuestion(question) {
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  return new Promise(resolve => {
    rl.question(question, answer => {
      rl.close();
      resolve(answer);
    });
  });
}

// Funci√≥n principal
async function main() {
  console.log('üöÄ Configuraci√≥n de Firebase para Task Management API');
  console.log('='.repeat(60));
  
  try {
    showConfiguration();
    
    const proceed = await askQuestion('\n¬øContinuar con la configuraci√≥n? (Y/n): ');
    if (proceed.toLowerCase() === 'n' || proceed.toLowerCase() === 'no') {
      console.log('‚ùå Configuraci√≥n cancelada.');
      process.exit(0);
    }
    
    await setupTasksCollection();
    await setupIndexes();
    await verifySetup();
    
    console.log('\nüéØ Pr√≥ximos pasos:');
    console.log('1. Copia el archivo firebase-service-account.json a tu proyecto');
    console.log('2. Configura las variables de entorno en tu archivo .env');
    console.log('3. Ejecuta tu aplicaci√≥n: npm run dev');
    console.log('4. Prueba el endpoint: http://localhost:3000/api/tasks');
    
  } catch (error) {
    console.error('‚ùå Error durante la configuraci√≥n:', error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  main();
}

module.exports = {
  setupTasksCollection,
  setupIndexes,
  verifySetup
};